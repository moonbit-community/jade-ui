// Generated using `moon info`, DON'T EDIT IT
package "Yoorkin/jade_ui/components"

import(
  "Yoorkin/jade_ui/theme"
  "Yoorkin/rabbit-tea/html"
)

// Values
fn[M] accordion(Array[@html.Html[M]], variant? : @theme.AccordionVariant, color? : @theme.AccordionColor, class? : String?) -> @html.Html[M]

fn[M] accordion_content(Array[@html.Html[M]], is_open? : Bool, class? : String) -> @html.Html[M]

fn[M] accordion_item(String, @html.Html[M], @html.Html[M], variant? : @theme.AccordionVariant, disabled? : Bool, class? : String) -> @html.Html[M]

fn[M] accordion_trigger(Array[@html.Html[M]], M, is_open? : Bool, color? : @theme.AccordionColor, show_icon? : Bool, class? : String, icon_class? : String) -> @html.Html[M]

fn[M] alert(Array[@html.Html[M]], variant? : @theme.AlertVariant, color? : @theme.AlertColor, dismissible? : Bool, icon? : @html.Html[M]?, class? : String?) -> @html.Html[M]

fn[M] alert_dialog(id~ : String, title~ : @html.Html[M], message~ : @html.Html[M], button_text? : String, close~ : M, button_color? : @theme.ButtonColor, size? : @theme.DialogSize, class? : String) -> @html.Html[M]

fn[M] alert_text(String, variant? : @theme.AlertVariant, color? : @theme.AlertColor, dismissible? : Bool, class? : String?) -> @html.Html[M]

fn[M] avatar(src? : String, alt? : String, fallback? : String, size? : @theme.AvatarSize, shape? : @theme.AvatarShape, color? : @theme.AvatarColor, class? : String) -> @html.Html[M]

fn[M] badge(Array[@html.Html[M]], content? : String, variant? : @theme.BadgeVariant, size? : @theme.BadgeSize, color? : @theme.BadgeColor, overlap? : @theme.BadgeOverlap, placement? : @theme.BadgePlacement, invisible? : Bool, className? : String?) -> @html.Html[M]

fn[M] badge_indicator(content? : String?, variant? : @theme.BadgeVariant, size? : @theme.BadgeSize, color? : @theme.BadgeColor, className? : String?) -> @html.Html[M]

fn[M] breadcrumb(Array[BreadcrumbItem[M]], separator? : String, variant? : @theme.BreadcrumbVariant, color? : @theme.BreadcrumbColor, size? : @theme.BreadcrumbSize, class? : String) -> @html.Html[M]

fn[M] breadcrumb_simple(Array[String], separator? : String, variant? : @theme.BreadcrumbVariant, color? : @theme.BreadcrumbColor, size? : @theme.BreadcrumbSize, class? : String) -> @html.Html[M]

fn[M] button(Array[@html.Html[M]], M, variant? : @theme.ButtonVariant, size? : @theme.ButtonSize, color? : @theme.ButtonColor, full_width? : Bool, ripple? : Bool, class? : String) -> @html.Html[M]

fn[M] button_group(Array[@html.Html[M]], orientation? : @theme.ButtonGroupOrientation, fullWidth? : Bool, class? : String?) -> @html.Html[M]

fn[M] card(Array[@html.Html[M]], variant? : @theme.CardVariant, color? : @theme.CardColor, class? : String) -> @html.Html[M]

fn[M] card_body(Array[@html.Html[M]], class? : String?) -> @html.Html[M]

fn[M] card_footer(Array[@html.Html[M]], class? : String?) -> @html.Html[M]

fn[M] card_header(Array[@html.Html[M]], class? : String?) -> @html.Html[M]

fn[M] checkbox(Bool, M, id? : String, name? : String, label? : String, size? : @theme.CheckboxSize, color? : @theme.CheckboxColor, disabled? : Bool, class? : String) -> @html.Html[M]

fn[M] chip(Array[@html.Html[M]], variant? : @theme.ChipVariant, size? : @theme.ChipSize, color? : @theme.ChipColor, isPill? : Bool, class? : String?) -> @html.Html[M]

fn[M] chip_dismiss_trigger(M, size? : @theme.ChipSize, class? : String?, children? : Array[@html.Html[M]]?) -> @html.Html[M]

fn[M] chip_icon(Array[@html.Html[M]], size? : @theme.ChipSize, class? : String?) -> @html.Html[M]

fn[M] chip_label(Array[@html.Html[M]], size? : @theme.ChipSize, class? : String?) -> @html.Html[M]

fn[M] confirm_dialog(id~ : String, title~ : @html.Html[M], @html.Html[M], confirm_text? : String, cancel_text? : String, on_confirm~ : M, close~ : M, confirm_color? : @theme.ButtonColor, size? : @theme.DialogSize, class? : String) -> @html.Html[M]

fn[M] dialog(id~ : String, title? : @html.Html[M], @html.Html[M], footer? : Array[@html.Html[M]], size? : @theme.DialogSize, close~ : M, class? : String) -> @html.Html[M]

fn[M] dialog_body(Array[@html.Html[M]], class? : String) -> @html.Html[M]

fn[M] dialog_box(Array[@html.Html[M]], size? : @theme.DialogSize, class? : String) -> @html.Html[M]

fn[M] dialog_footer(Array[@html.Html[M]], class? : String) -> @html.Html[M]

fn[M] dialog_header(@html.Html[M], close~ : M, class? : String) -> @html.Html[M]

fn[M] dialog_overlay(id~ : String, Array[@html.Html[M]], close~ : M, class? : String) -> @html.Html[M]

fn[M] form_dialog(id~ : String, @html.Html[M], @html.Html[M], submitText? : String, cancelText? : String, M, M, submitColor? : @theme.ButtonColor, size? : @theme.DialogSize, class? : String) -> @html.Html[M]

fn[M] menu(Array[@html.Html[M]], variant? : @theme.MenuVariant, color? : @theme.MenuColor, class? : String?) -> @html.Html[M]

fn[M] menu_content(Array[@html.Html[M]], isOpen? : Bool, variant? : @theme.MenuVariant, placement? : @theme.MenuPlacement, class? : String?) -> @html.Html[M]

fn[M] menu_item(Array[@html.Html[M]], M, disabled? : Bool, selected? : Bool, ripple? : Bool, class? : String?) -> @html.Html[M]

fn[M] menu_separator(class? : String?) -> @html.Html[M]

fn[M] menu_trigger(Array[@html.Html[M]], M, isOpen? : Bool, color? : @theme.MenuColor, showIcon? : Bool, class? : String?) -> @html.Html[M]

fn[M] navbar(Array[@html.Html[M]], variant? : @theme.NavbarVariant, color? : @theme.NavbarColor, shadow? : Bool, blurred? : Bool, fullWidth? : Bool, class? : String?) -> @html.Html[M]

fn[M] popover(content~ : String, children~ : @html.Html[M], placement? : @theme.PopoverPlacement, size? : @theme.PopoverSize, color? : @theme.PopoverColor, arrow? : Bool, class? : String) -> @html.Html[M]

fn[M] radio(Bool, M, id? : String, name? : String, value? : String, label? : String, size? : @theme.RadioSize, color? : @theme.RadioColor, disabled? : Bool, class? : String) -> @html.Html[M]

fn[M] simple_dialog(id~ : String, @html.Html[M], size? : @theme.DialogSize, close~ : M, class? : String) -> @html.Html[M]

fn[M] slider(value? : Int, min? : Int, max? : Int, on_input~ : (Int) -> M, color? : @theme.SliderColor, size? : @theme.SliderSize, class? : String, children? : Array[@html.Html[M]]) -> @html.Html[M]

fn[M] spinner(size? : @theme.SpinnerSize, color? : @theme.SpinnerColor, class? : String) -> @html.Html[M]

fn[M] switch(checked? : Bool, change~ : M, color? : @theme.SwitchColor, class? : String, id? : String) -> @html.Html[M]

fn[M] tabs(Array[@html.Html[M]], orientation? : @theme.TabsOrientation, class? : String?) -> @html.Html[M]

fn[M] tabs_list(Array[@html.Html[M]], orientation? : @theme.TabsOrientation, variant? : @theme.TabsVariant, class? : String?) -> @html.Html[M]

fn[M] tabs_panel(Array[@html.Html[M]], is_active? : Bool, class? : String?) -> @html.Html[M]

fn[M] tabs_trigger(Array[@html.Html[M]], M, size? : @theme.TabsSize, variant? : @theme.TabsVariant, is_active? : Bool, class? : String?) -> @html.Html[M]

fn[M] tooltip(content~ : String, placement? : @theme.TooltipPlacement, size? : @theme.TooltipSize, color? : @theme.TooltipColor, arrow? : Bool, class? : String, children~ : @html.Html[M]) -> @html.Html[M]

fn[M] tooltip_simple(content~ : String, children~ : @html.Html[M]) -> @html.Html[M]

fn[M] tooltip_with_color(content~ : String, color~ : @theme.TooltipColor, children~ : @html.Html[M]) -> @html.Html[M]

fn[M] tooltip_with_placement(content~ : String, placement~ : @theme.TooltipPlacement, children~ : @html.Html[M]) -> @html.Html[M]

fn[M] typography(tag? : @theme.TypographyType, color? : @theme.TypographyColor, class? : String, Array[@html.Html[M]]) -> @html.Html[M]

// Errors

// Types and methods
pub(all) struct BreadcrumbItem[M] {
  text : String
  href : String?
  click : M?
  isActive : Bool
}

// Type aliases

// Traits

