package "Yoorkin/jade_ui/theme"

import(
  "Yoorkin/rabbit-tea/html"
  "moonbitlang/core/json"
)

// Values
fn clsx(Array[String]) -> String

fn get_button_style(variant~ : ButtonVariant, size~ : ButtonSize, color~ : ButtonColor, fullWidth~ : Bool, ripple~ : Bool, className~ : String?) -> String

fn get_card_body_style(className~ : String?) -> String

fn get_card_footer_style(className~ : String?) -> String

fn get_card_header_style(className~ : String?) -> String

fn get_card_style(variant~ : CardVariant, color~ : CardColor, className~ : String?) -> String

fn get_input_color_class(InputColor) -> String

fn get_input_size_class(InputSize) -> String

fn get_input_style(variant~ : InputVariant, size~ : InputSize, color~ : InputColor, is_error~ : Bool, is_success~ : Bool, is_pill~ : Bool, disabled~ : Bool, class~ : String?) -> String

fn get_input_variant_class(InputVariant) -> String

fn get_slider_classes(String) -> String

fn get_slider_color_value(SliderColor) -> String

fn get_slider_styles(Int, String, Double) -> Array[String]

fn get_slider_thumb_height(SliderSize) -> Int

fn get_typography_style(TypographyType, TypographyColor, String) -> String

fn light() -> JadeTheme

// Types and methods
pub(all) enum ButtonColor {
  Primary
  Secondary
  Info
  Success
  Warning
  Error
}

pub(all) enum ButtonSize {
  Xs
  Sm
  Md
  Lg
  Xl
}

pub(all) enum ButtonVariant {
  Ghost
  Outlined
  Solid
  Gradient
}

pub(all) enum CardColor {
  Default
  Primary
  Secondary
  Success
  Info
  Warning
  Error
}

pub(all) enum CardVariant {
  Ghost
  Solid
  Outline
  Gradient
}

pub(all) enum InputColor {
  Default
  Primary
  Secondary
  Info
  Success
  Warning
  Error
}
impl Eq for InputColor
impl Show for InputColor

pub(all) enum InputSize {
  Xs
  Sm
  Md
  Lg
  Xl
}
impl Eq for InputSize
impl Show for InputSize

pub(all) enum InputVariant {
  Ghost
  Outlined
  Solid
}
impl Eq for InputVariant
impl Show for InputVariant

pub(all) struct JadeTheme {
  primary : String
  primaryContent : String
  secondary : String
  secondaryContent : String
  accent : String
  accentContent : String
  neutral : String
  neutralContent : String
  base100 : String
  base200 : String
  base300 : String
  baseContent : String
  info : String
  infoContent : String
  success : String
  successContent : String
  warning : String
  warningContent : String
  error : String
  errorContent : String
  radiusSelector : String
  radiusField : String
  radiusBox : String
  sizeSelector : String
  sizeField : String
  border : String
}
fn JadeTheme::apply(Self) -> Unit
fn[M] JadeTheme::to_attributes(Self) -> Array[@html.Attribute[M]]
fn JadeTheme::to_styles(Self) -> Map[String, String]
impl Eq for JadeTheme
impl Show for JadeTheme
impl ToJson for JadeTheme
impl @json.FromJson for JadeTheme

pub(all) enum SliderColor {
  Primary
  Secondary
  Info
  Success
  Warning
  Error
}

pub(all) enum SliderSize {
  Xs
  Sm
  Md
  Lg
  Xl
}

pub(all) enum TypographyColor {
  Inherit
  Default
  Primary
  Secondary
  Success
  Info
  Warning
  Error
}

pub(all) enum TypographyType {
  H1
  H2
  H3
  H4
  H5
  H6
  Lead
  P
  Small
}

// Type aliases

// Traits

